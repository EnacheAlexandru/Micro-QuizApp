version: "3.8"

services:

  mysql-question:
    container_name: mysql-question
    image: mysql:8.0.35
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: question-service
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - ./docker-volumes/mysql-question:/var/lib/mysql
    restart: always

  mysql-gateway:
    container_name: mysql-gateway
    image: mysql:8.0.35
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: gateway-service
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - ./docker-volumes/mysql-gateway:/var/lib/mysql
    restart: always

  mysql-leaderboard:
    container_name: mysql-leaderboard
    image: mysql:8.0.35
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: leaderboard-service
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - ./docker-volumes/mysql-leaderboard:/var/lib/mysql
    restart: always

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9.29-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    restart: always

  gateway-service:
    container_name: gateway-service
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-gateway:3306/gateway-service
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
    depends_on:
      - mysql-gateway
      - discovery-service
    restart: always

#  question-service:
#    container_name: question-service
#    build:
#      context: ./question-service
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    environment:
#      - spring.datasource.url=jdbc:mysql://mysql-question:3306/question-service
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
#      - spring.kafka.bootstrap-servers=kafka:9093
#    depends_on:
#      - mysql-question
#      - discovery-service
#      - kafka
#    restart: always

  leaderboard-service:
    container_name: leaderboard-service
    build:
      context: ./leaderboard-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-leaderboard:3306/leaderboard-service
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.kafka.bootstrap-servers=kafka:9093
      - spring.rabbitmq.host=rabbitmq
    depends_on:
      - mysql-leaderboard
      - discovery-service
      - kafka
      - rabbitmq
    restart: always

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.rabbitmq.host=rabbitmq
    depends_on:
      - discovery-service
      - rabbitmq
    restart: always

#for testing load balancer
  question-service:
    build:
      context: ./question-service
      dockerfile: Dockerfile
    ports:
      - "0:8081"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-question:3306/question-service
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka
      - spring.kafka.bootstrap-servers=kafka:9093
      - server.port=0
    depends_on:
      - mysql-question
      - discovery-service
      - kafka
    restart: always
    deploy:
      mode: replicated
      replicas: 2

  mainweb:
    container_name: mainweb
    build:
      context: ./microfrontends/mainweb
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    stdin_open: true

  sideweb:
    container_name: sideweb
    build:
      context: ./microfrontends/sideweb
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    stdin_open: true